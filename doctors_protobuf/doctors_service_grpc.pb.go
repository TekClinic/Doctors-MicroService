// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: doctors_service.proto

package doctors_protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DoctorsServiceClient is the client API for DoctorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoctorsServiceClient interface {
	GetDoctor(ctx context.Context, in *GetDoctorRequest, opts ...grpc.CallOption) (*GetDoctorResponse, error)
	GetDoctorsIDs(ctx context.Context, in *GetDoctorsIDsRequest, opts ...grpc.CallOption) (*GetDoctorsIDsResponse, error)
}

type doctorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDoctorsServiceClient(cc grpc.ClientConnInterface) DoctorsServiceClient {
	return &doctorsServiceClient{cc}
}

func (c *doctorsServiceClient) GetDoctor(ctx context.Context, in *GetDoctorRequest, opts ...grpc.CallOption) (*GetDoctorResponse, error) {
	out := new(GetDoctorResponse)
	err := c.cc.Invoke(ctx, "/doctors.DoctorsService/GetDoctor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorsServiceClient) GetDoctorsIDs(ctx context.Context, in *GetDoctorsIDsRequest, opts ...grpc.CallOption) (*GetDoctorsIDsResponse, error) {
	out := new(GetDoctorsIDsResponse)
	err := c.cc.Invoke(ctx, "/doctors.DoctorsService/GetDoctorsIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorsServiceServer is the server API for DoctorsService service.
// All implementations must embed UnimplementedDoctorsServiceServer
// for forward compatibility
type DoctorsServiceServer interface {
	GetDoctor(context.Context, *GetDoctorRequest) (*GetDoctorResponse, error)
	GetDoctorsIDs(context.Context, *GetDoctorsIDsRequest) (*GetDoctorsIDsResponse, error)
	mustEmbedUnimplementedDoctorsServiceServer()
}

// UnimplementedDoctorsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDoctorsServiceServer struct {
}

func (UnimplementedDoctorsServiceServer) GetDoctor(context.Context, *GetDoctorRequest) (*GetDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctor not implemented")
}
func (UnimplementedDoctorsServiceServer) GetDoctorsIDs(context.Context, *GetDoctorsIDsRequest) (*GetDoctorsIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorsIDs not implemented")
}
func (UnimplementedDoctorsServiceServer) mustEmbedUnimplementedDoctorsServiceServer() {}

// UnsafeDoctorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoctorsServiceServer will
// result in compilation errors.
type UnsafeDoctorsServiceServer interface {
	mustEmbedUnimplementedDoctorsServiceServer()
}

func RegisterDoctorsServiceServer(s grpc.ServiceRegistrar, srv DoctorsServiceServer) {
	s.RegisterService(&DoctorsService_ServiceDesc, srv)
}

func _DoctorsService_GetDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorsServiceServer).GetDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctors.DoctorsService/GetDoctor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorsServiceServer).GetDoctor(ctx, req.(*GetDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorsService_GetDoctorsIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDoctorsIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorsServiceServer).GetDoctorsIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/doctors.DoctorsService/GetDoctorsIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorsServiceServer).GetDoctorsIDs(ctx, req.(*GetDoctorsIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DoctorsService_ServiceDesc is the grpc.ServiceDesc for DoctorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoctorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doctors.DoctorsService",
	HandlerType: (*DoctorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDoctor",
			Handler:    _DoctorsService_GetDoctor_Handler,
		},
		{
			MethodName: "GetDoctorsIDs",
			Handler:    _DoctorsService_GetDoctorsIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doctors_service.proto",
}
